// Generated by `wit-bindgen` 0.4.0. DO NOT EDIT!
pub trait Component {
    fn hello_world() -> wit_bindgen::rt::string::String;
}

#[doc(hidden)]
pub unsafe fn call_hello_world<T: Component>() -> i32 {
    #[allow(unused_imports)]
    use wit_bindgen::rt::{alloc, string::String, vec::Vec};

    // Before executing any other code, use this function to run all static
    // constructors, if they have not yet been run. This is a hack required
    // to work around wasi-libc ctors calling import functions to initialize
    // the environment.
    //
    // This functionality will be removed once rust 1.69.0 is stable, at which
    // point wasi-libc will no longer have this behavior.
    //
    // See
    // https://github.com/bytecodealliance/preview2-prototyping/issues/99
    // for more details.
    #[cfg(target_arch = "wasm32")]
    wit_bindgen::rt::run_ctors_once();

    let result0 = T::hello_world();
    let ptr1 = _RET_AREA.0.as_mut_ptr() as i32;
    let vec2 = (result0.into_bytes()).into_boxed_slice();
    let ptr2 = vec2.as_ptr() as i32;
    let len2 = vec2.len() as i32;
    core::mem::forget(vec2);
    *((ptr1 + 4) as *mut i32) = len2;
    *((ptr1 + 0) as *mut i32) = ptr2;
    ptr1
}

#[doc(hidden)]
pub unsafe fn post_return_hello_world<T: Component>(arg0: i32) {
    wit_bindgen::rt::dealloc(
        *((arg0 + 0) as *const i32),
        (*((arg0 + 4) as *const i32)) as usize,
        1,
    );
}

#[allow(unused_imports)]
use wit_bindgen::rt::{alloc, string::String, vec::Vec};

#[repr(align(4))]
struct _RetArea([u8; 8]);
static mut _RET_AREA: _RetArea = _RetArea([0; 8]);

/// Declares the export of the component's world for the
/// given type.
#[macro_export]
macro_rules! export(($t:ident) => {
  const _: () = {

    #[doc(hidden)]
    #[export_name = "hello-world"]
    #[allow(non_snake_case)]
    unsafe extern "C" fn __export_component_hello_world() -> i32 {
      bindings::call_hello_world::<$t>()
    }

    #[doc(hidden)]
    #[export_name = "cabi_post_hello-world"]
    #[allow(non_snake_case)]
    unsafe extern "C" fn __post_return_component_hello_world(arg0: i32,) {
      bindings::post_return_hello_world::<$t>(arg0,)
    }

  };

  #[used]
  #[doc(hidden)]
  #[cfg(target_arch = "wasm32")]
  static __FORCE_SECTION_REF: fn() = bindings::__link_section;
});

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:component"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 188] = [
    2, 0, 5, 119, 111, 114, 108, 100, 5, 119, 111, 114, 108, 100, 9, 99, 111, 109, 112, 111, 110,
    101, 110, 116, 0, 97, 115, 109, 12, 0, 1, 0, 7, 61, 1, 65, 2, 1, 65, 2, 1, 64, 0, 0, 115, 4,
    11, 104, 101, 108, 108, 111, 45, 119, 111, 114, 108, 100, 0, 1, 0, 4, 9, 99, 111, 109, 112,
    111, 110, 101, 110, 116, 20, 112, 107, 103, 58, 47, 119, 111, 114, 108, 100, 47, 99, 111, 109,
    112, 111, 110, 101, 110, 116, 4, 0, 0, 68, 9, 112, 114, 111, 100, 117, 99, 101, 114, 115, 1,
    12, 112, 114, 111, 99, 101, 115, 115, 101, 100, 45, 98, 121, 2, 13, 119, 105, 116, 45, 99, 111,
    109, 112, 111, 110, 101, 110, 116, 5, 48, 46, 55, 46, 52, 16, 119, 105, 116, 45, 98, 105, 110,
    100, 103, 101, 110, 45, 114, 117, 115, 116, 5, 48, 46, 52, 46, 48, 11, 21, 1, 5, 119, 111, 114,
    108, 100, 10, 112, 107, 103, 58, 47, 119, 111, 114, 108, 100, 3, 0, 0,
];

#[inline(never)]
#[doc(hidden)]
#[cfg(target_arch = "wasm32")]
pub fn __link_section() {}
